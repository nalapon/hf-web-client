// Copyright the Hyperledger Fabric contributors. All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0

// @generated by protoc-gen-es v2.5.1 with parameter "target=ts,keep_empty_files=true"
// @generated from file orderer/clusterserver.proto (package orderer, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import type { Envelope, Status } from "../common/common_pb";
import { file_common_common } from "../common/common_pb";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file orderer/clusterserver.proto.
 */
export const file_orderer_clusterserver: GenFile = /*@__PURE__*/
  fileDesc("ChtvcmRlcmVyL2NsdXN0ZXJzZXJ2ZXIucHJvdG8SB29yZGVyZXIi3AEKHUNsdXN0ZXJOb2RlU2VydmljZVN0ZXBSZXF1ZXN0EjgKD25vZGVfY29ucmVxdWVzdBgBIAEoCzIdLm9yZGVyZXIuTm9kZUNvbnNlbnN1c1JlcXVlc3RIABJAChBub2RlX3RyYW5yZXF1ZXN0GAIgASgLMiQub3JkZXJlci5Ob2RlVHJhbnNhY3Rpb25PcmRlclJlcXVlc3RIABI0ChBub2RlX2F1dGhyZXF1ZXN0GAMgASgLMhgub3JkZXJlci5Ob2RlQXV0aFJlcXVlc3RIAEIJCgdwYXlsb2FkImcKHkNsdXN0ZXJOb2RlU2VydmljZVN0ZXBSZXNwb25zZRI6Cg10cmFub3JkZXJfcmVzGAEgASgLMiEub3JkZXJlci5UcmFuc2FjdGlvbk9yZGVyUmVzcG9uc2VIAEIJCgdwYXlsb2FkIjkKFE5vZGVDb25zZW5zdXNSZXF1ZXN0Eg8KB3BheWxvYWQYASABKAwSEAoIbWV0YWRhdGEYAiABKAwiXQobTm9kZVRyYW5zYWN0aW9uT3JkZXJSZXF1ZXN0EhsKE2xhc3RfdmFsaWRhdGlvbl9zZXEYASABKAQSIQoHcGF5bG9hZBgCIAEoCzIQLmNvbW1vbi5FbnZlbG9wZSJoChhUcmFuc2FjdGlvbk9yZGVyUmVzcG9uc2USDwoHY2hhbm5lbBgBIAEoCRINCgV0eF9pZBgCIAEoCRIeCgZzdGF0dXMYAyABKA4yDi5jb21tb24uU3RhdHVzEgwKBGluZm8YBCABKAkirgEKD05vZGVBdXRoUmVxdWVzdBIPCgd2ZXJzaW9uGAEgASgNEhEKCXNpZ25hdHVyZRgCIAEoDBItCgl0aW1lc3RhbXAYAyABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEg8KB2Zyb21faWQYBCABKAQSDQoFdG9faWQYBSABKAQSFwoPc2Vzc2lvbl9iaW5kaW5nGAYgASgMEg8KB2NoYW5uZWwYByABKAkycQoSQ2x1c3Rlck5vZGVTZXJ2aWNlElsKBFN0ZXASJi5vcmRlcmVyLkNsdXN0ZXJOb2RlU2VydmljZVN0ZXBSZXF1ZXN0Gicub3JkZXJlci5DbHVzdGVyTm9kZVNlcnZpY2VTdGVwUmVzcG9uc2UoATABQlgKJW9yZy5oeXBlcmxlZGdlci5mYWJyaWMucHJvdG9zLm9yZGVyZXJaL2dpdGh1Yi5jb20vaHlwZXJsZWRnZXIvZmFicmljLXByb3Rvcy1nby9vcmRlcmVyYgZwcm90bzM", [file_common_common, file_google_protobuf_timestamp]);

/**
 * ClusterNodeServiceStepRequest wraps a message that is sent to a cluster member.
 *
 * @generated from message orderer.ClusterNodeServiceStepRequest
 */
export type ClusterNodeServiceStepRequest = Message<"orderer.ClusterNodeServiceStepRequest"> & {
  /**
   * @generated from oneof orderer.ClusterNodeServiceStepRequest.payload
   */
  payload: {
    /**
     * node_conrequest is a consensus specific message between the cluster memebers.
     *
     * @generated from field: orderer.NodeConsensusRequest node_conrequest = 1;
     */
    value: NodeConsensusRequest;
    case: "nodeConrequest";
  } | {
    /**
     * node_tranrequest is a relay of a transaction.
     *
     * @generated from field: orderer.NodeTransactionOrderRequest node_tranrequest = 2;
     */
    value: NodeTransactionOrderRequest;
    case: "nodeTranrequest";
  } | {
    /**
     * Auth authentiates the member that initiated the stream
     *
     * @generated from field: orderer.NodeAuthRequest node_authrequest = 3;
     */
    value: NodeAuthRequest;
    case: "nodeAuthrequest";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message orderer.ClusterNodeServiceStepRequest.
 * Use `create(ClusterNodeServiceStepRequestSchema)` to create a new message.
 */
export const ClusterNodeServiceStepRequestSchema: GenMessage<ClusterNodeServiceStepRequest> = /*@__PURE__*/
  messageDesc(file_orderer_clusterserver, 0);

/**
 * ClusterNodeServiceStepResponse is a message received from a cluster member.
 *
 * @generated from message orderer.ClusterNodeServiceStepResponse
 */
export type ClusterNodeServiceStepResponse = Message<"orderer.ClusterNodeServiceStepResponse"> & {
  /**
   * @generated from oneof orderer.ClusterNodeServiceStepResponse.payload
   */
  payload: {
    /**
     * @generated from field: orderer.TransactionOrderResponse tranorder_res = 1;
     */
    value: TransactionOrderResponse;
    case: "tranorderRes";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message orderer.ClusterNodeServiceStepResponse.
 * Use `create(ClusterNodeServiceStepResponseSchema)` to create a new message.
 */
export const ClusterNodeServiceStepResponseSchema: GenMessage<ClusterNodeServiceStepResponse> = /*@__PURE__*/
  messageDesc(file_orderer_clusterserver, 1);

/**
 * NodeConsensusRequest is a consensus specific message sent to a cluster member.
 *
 * @generated from message orderer.NodeConsensusRequest
 */
export type NodeConsensusRequest = Message<"orderer.NodeConsensusRequest"> & {
  /**
   * @generated from field: bytes payload = 1;
   */
  payload: Uint8Array;

  /**
   * @generated from field: bytes metadata = 2;
   */
  metadata: Uint8Array;
};

/**
 * Describes the message orderer.NodeConsensusRequest.
 * Use `create(NodeConsensusRequestSchema)` to create a new message.
 */
export const NodeConsensusRequestSchema: GenMessage<NodeConsensusRequest> = /*@__PURE__*/
  messageDesc(file_orderer_clusterserver, 2);

/**
 * NodeTransactionOrderRequest wraps a transaction to be sent for ordering.
 *
 * @generated from message orderer.NodeTransactionOrderRequest
 */
export type NodeTransactionOrderRequest = Message<"orderer.NodeTransactionOrderRequest"> & {
  /**
   * last_validation_seq denotes the last configuration sequence at which the
   * sender validated this message.
   *
   * @generated from field: uint64 last_validation_seq = 1;
   */
  lastValidationSeq: bigint;

  /**
   * content is the fabric transaction
   * that is forwarded to the cluster member.
   *
   * @generated from field: common.Envelope payload = 2;
   */
  payload?: Envelope;
};

/**
 * Describes the message orderer.NodeTransactionOrderRequest.
 * Use `create(NodeTransactionOrderRequestSchema)` to create a new message.
 */
export const NodeTransactionOrderRequestSchema: GenMessage<NodeTransactionOrderRequest> = /*@__PURE__*/
  messageDesc(file_orderer_clusterserver, 3);

/**
 * TransactionOrderResponse returns a success
 * or failure status to the sender.
 *
 * @generated from message orderer.TransactionOrderResponse
 */
export type TransactionOrderResponse = Message<"orderer.TransactionOrderResponse"> & {
  /**
   * @generated from field: string channel = 1;
   */
  channel: string;

  /**
   * @generated from field: string tx_id = 2;
   */
  txId: string;

  /**
   * Status code, which may be used to programatically respond to success/failure.
   *
   * @generated from field: common.Status status = 3;
   */
  status: Status;

  /**
   * Info string which may contain additional information about the returned status.
   *
   * @generated from field: string info = 4;
   */
  info: string;
};

/**
 * Describes the message orderer.TransactionOrderResponse.
 * Use `create(TransactionOrderResponseSchema)` to create a new message.
 */
export const TransactionOrderResponseSchema: GenMessage<TransactionOrderResponse> = /*@__PURE__*/
  messageDesc(file_orderer_clusterserver, 4);

/**
 * NodeAuthRequest for authenticate the stream 
 * between the cluster members
 *
 * @generated from message orderer.NodeAuthRequest
 */
export type NodeAuthRequest = Message<"orderer.NodeAuthRequest"> & {
  /**
   * version represents the fields on which the signature is computed 
   *
   * @generated from field: uint32 version = 1;
   */
  version: number;

  /**
   * signature is verifiable using the initiator's public key
   *
   * @generated from field: bytes signature = 2;
   */
  signature: Uint8Array;

  /**
   * timestamp indicates the freshness of the request; expected to be within the margin
   * of the responsder's local time
   *
   * @generated from field: google.protobuf.Timestamp timestamp = 3;
   */
  timestamp?: Timestamp;

  /**
   * from_id is the numerical identifier of the initiator of the connection
   *
   * @generated from field: uint64 from_id = 4;
   */
  fromId: bigint;

  /**
   * to_id is the numerical identifier of the node that is being connected to
   *
   * @generated from field: uint64 to_id = 5;
   */
  toId: bigint;

  /**
   * session_binding is verifiable using application level protocol 
   *
   * @generated from field: bytes session_binding = 6;
   */
  sessionBinding: Uint8Array;

  /**
   * @generated from field: string channel = 7;
   */
  channel: string;
};

/**
 * Describes the message orderer.NodeAuthRequest.
 * Use `create(NodeAuthRequestSchema)` to create a new message.
 */
export const NodeAuthRequestSchema: GenMessage<NodeAuthRequest> = /*@__PURE__*/
  messageDesc(file_orderer_clusterserver, 5);

/**
 * Service ClusterNodeService defines communication between cluster members.
 *
 * @generated from service orderer.ClusterNodeService
 */
export const ClusterNodeService: GenService<{
  /**
   * Step passes an implementation-specific message to another cluster member.
   *
   * @generated from rpc orderer.ClusterNodeService.Step
   */
  step: {
    methodKind: "bidi_streaming";
    input: typeof ClusterNodeServiceStepRequestSchema;
    output: typeof ClusterNodeServiceStepResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_orderer_clusterserver, 0);

